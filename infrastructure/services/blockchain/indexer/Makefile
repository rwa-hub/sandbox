# Cores e formata√ß√£o
BOLD := \033[1m
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
RESET := \033[0m

# Vari√°veis do projeto
PROJECT_ROOT := ../../../../packages/blockchain/indexer
DOCKER_COMPOSE := docker-compose -f docker-compose.yml

# Mensagens
DOCKER_UP_MSG := "üöÄ Iniciando containers em modo detached..."
DOCKER_DOWN_MSG := "üîΩ Parando todos os containers..."
DOCKER_BUILD_MSG := "üèóÔ∏è  Construindo imagens Docker..."
DOCKER_LOGS_MSG := "üìã Exibindo logs dos containers..."
BUILD_MSG := "üî® Compilando o projeto..."
TEST_MSG := "üß™ Executando testes..."
CLEAN_MSG := "üßπ Limpando arquivos gerados..."
DEPS_MSG := "üì¶ Instalando depend√™ncias..."
UPDATE_MSG := "‚¨ÜÔ∏è  Atualizando depend√™ncias..."
LINT_MSG := "üîç Verificando c√≥digo..."

# Define todos os targets como PHONY
.PHONY: help all build test clean deps docker-* dev lint update-deps

# Target padr√£o mostra a ajuda
.DEFAULT_GOAL := help

# Ajuda
help:
	@echo "$(BOLD)üõ†Ô∏è  Monitor Indexer Service - Comandos Dispon√≠veis:$(RESET)"
	@echo ""
	@echo "$(BOLD)Comandos de Desenvolvimento:$(RESET)"
	@echo "  $(CYAN)make dev$(RESET)          - Inicia ambiente de desenvolvimento completo"
	@echo "  $(CYAN)make build$(RESET)        - Compila o projeto"
	@echo "  $(CYAN)make test$(RESET)         - Executa os testes"
	@echo "  $(CYAN)make lint$(RESET)         - Executa linters e verifica√ß√µes"
	@echo ""
	@echo "$(BOLD)Comandos Docker:$(RESET)"
	@echo "  $(YELLOW)make docker-up$(RESET)     - Inicia os containers"
	@echo "  $(YELLOW)make docker-down$(RESET)   - Para os containers"
	@echo "  $(YELLOW)make docker-build$(RESET)  - Constr√≥i as imagens"
	@echo "  $(YELLOW)make docker-logs$(RESET)   - Exibe logs dos containers"
	@echo "  $(YELLOW)make docker-restart$(RESET)- Reinicia os containers"
	@echo ""
	@echo "$(BOLD)Comandos de Manuten√ß√£o:$(RESET)"
	@echo "  $(MAGENTA)make deps$(RESET)         - Instala depend√™ncias"
	@echo "  $(MAGENTA)make update-deps$(RESET)  - Atualiza depend√™ncias"
	@echo "  $(MAGENTA)make clean$(RESET)        - Remove arquivos gerados"
	@echo ""

# Instala todas as depend√™ncias do projeto
deps:
	@echo "$(CYAN)$(DEPS_MSG)$(RESET)"
	@cd $(PROJECT_ROOT) && go mod download
	@cd $(PROJECT_ROOT) && go mod tidy
	@echo "$(GREEN)‚úì Depend√™ncias instaladas com sucesso!$(RESET)"

# Constr√≥i o projeto
build:
	@echo "$(CYAN)$(BUILD_MSG)$(RESET)"
	@cd $(PROJECT_ROOT) && go build -o monitor-service cmd/main.go
	@echo "$(GREEN)‚úì Build realizado com sucesso!$(RESET)"

# Executa os testes
test:
	@echo "$(CYAN)$(TEST_MSG)$(RESET)"
	@cd $(PROJECT_ROOT) && go test ./... -v
	@echo "$(GREEN)‚úì Testes conclu√≠dos!$(RESET)"

# Limpa os arquivos gerados
clean:
	@echo "$(YELLOW)$(CLEAN_MSG)$(RESET)"
	@cd $(PROJECT_ROOT) && rm -f monitor-service
	@cd $(PROJECT_ROOT) && go clean
	@echo "$(GREEN)‚úì Limpeza conclu√≠da!$(RESET)"

# Verifica o c√≥digo
lint:
	@echo "$(CYAN)$(LINT_MSG)$(RESET)"
	@cd $(PROJECT_ROOT) && go vet ./...
	@cd $(PROJECT_ROOT) && golangci-lint run
	@echo "$(GREEN)‚úì Verifica√ß√£o de c√≥digo conclu√≠da!$(RESET)"

# Atualiza todas as depend√™ncias
update-deps:
	@echo "$(CYAN)$(UPDATE_MSG)$(RESET)"
	@cd $(PROJECT_ROOT) && go get -u all
	@cd $(PROJECT_ROOT) && go mod tidy
	@echo "$(GREEN)‚úì Depend√™ncias atualizadas com sucesso!$(RESET)"

# Comandos Docker
docker-up:
	@echo "$(CYAN)$(DOCKER_UP_MSG)$(RESET)"
	@cd .. && docker-compose up -d
	@echo "$(GREEN)‚úì Containers iniciados com sucesso!$(RESET)"

docker-down:
	@echo "$(YELLOW)$(DOCKER_DOWN_MSG)$(RESET)"
	@cd .. && docker-compose down
	@echo "$(GREEN)‚úì Containers parados com sucesso!$(RESET)"

docker-build:
	@echo "$(CYAN)$(DOCKER_BUILD_MSG)$(RESET)"
	@cd .. && docker-compose build
	@echo "$(GREEN)‚úì Build dos containers conclu√≠do!$(RESET)"

docker-logs:
	@echo "$(CYAN)$(DOCKER_LOGS_MSG)$(RESET)"
	@cd .. && docker-compose logs -f

# Comando principal para desenvolvimento com Docker
dev: docker-build docker-up
	@echo "$(GREEN)‚úì Ambiente de desenvolvimento pronto!$(RESET)"
	@echo "$(CYAN)üìù Use 'make docker-logs' para ver os logs$(RESET)"

# Para o ambiente de desenvolvimento
docker-restart: docker-down docker-up
	@echo "$(GREEN)‚úì Containers reiniciados com sucesso!$(RESET)" 